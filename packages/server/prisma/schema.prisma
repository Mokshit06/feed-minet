// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Provider {
  GOOGLE
  DISCORD

  @@map("provider")
}

enum UserRole {
  RESTAURANT
  DONATOR
  PICKUP

  @@map("user_role")
}

model User {
  id            String      @id @default(uuid())
  socialId      String      @unique @map("social_id")
  name          String
  email         String?     @unique
  image         String?
  admin         Boolean     @default(false)
  provider      Provider
  address       String?
  role          UserRole?
  restaurant    Restaurant?
  donations     Donation[]
  pickups       Pickup[]
  credits       Int?
  currentCoords Int[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ngo {
  id                String     @id @default(uuid())
  name              String
  numberOfPeople    Int
  address           String?
  coordinates       Int[]
  donationsReceived Donation[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Donation {
  id          String   @id @default(uuid())
  description String
  quantity    Int
  donator     User     @relation(fields: [donatorId], references: [id])
  donatorId   String
  ngo         Ngo      @relation(fields: [ngoId], references: [id])
  ngoId       String
  // pickup      Pickup
  // assignedTo   User     @relation("PickupToDonation", fields: [assignedToId], references: [id])
  // assignedToId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pickup      Pickup?
}

model Pickup {
  id            String    @id @default(uuid())
  assignedTo    User      @relation(fields: [assignedToId], references: [id])
  assignedToId  String
  donation      Donation? @relation(fields: [donationId], references: [id])
  donationId    String?
  currentCoords Int[]
  startedAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime

  @@index([expire], name: "IDX_session_expire")
  @@map("session")
}
